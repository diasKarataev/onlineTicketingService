package com.example.onlineTicketingService.service;

import com.example.onlineTicketingService.models.User;
import com.example.onlineTicketingService.repository.UserRepository;
import jakarta.transaction.Transactional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.ui.Model;

import java.util.List;
import java.util.Objects;
import java.util.Optional;

@Service
public class UserService {
    private final UserRepository userRepository;
    @Autowired
    public UserService(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    public List<User> getUsers(Model model){
        return userRepository.findAll();

    }

    public void addNewUser(User user) {
        Optional<User> userByEmail =
                userRepository.findUserByEmail(user.getEmail());
        if(userByEmail.isPresent()){
            throw new IllegalStateException("email taken");
        }
        userRepository.save(user);
    }


    public void deleteUser(Long userId) {
        if(!userRepository.existsById(userId)){
            throw new IllegalStateException("user " + userId + " does not exist");
        }
        userRepository.deleteById(userId);
    }
    @Transactional
    public void updateUser(Long userId, String name, String email) {
       User user = userRepository.findById(userId).
                orElseThrow(() -> new IllegalStateException("user " + userId + " does not exist"));
       if(name != null && name.length() > 0 && !Objects.equals(user.getName(), name)) user.setName(name);
       if(email != null && email.length() > 0 && !Objects.equals(user.getEmail(), email)){
           Optional<User> userByEmail = userRepository.findUserByEmail(email);
           if(userByEmail.isPresent()){
               throw new IllegalStateException("email taken");
           }
           user.setEmail(email);
       }
    }
}
